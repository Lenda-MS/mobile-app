{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Colors, FONTS } from \"../theme\";\nimport { getScreenPercent } from \"../utils\";\nimport { Alert, Button } from \"../components\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { firebase } from \"../firebase\";\nimport GlassX, { useStore } from \"glassx\";\nimport SelectDropdown from \"react-native-select-dropdown\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport var AddressForm = function AddressForm(_ref) {\n  var useStep = _ref.useStep;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useStore = useStore(\"displaySuccess\"),\n      _useStore2 = _slicedToArray(_useStore, 2),\n      displaySuccess = _useStore2[0],\n      setDisplaySuccess = _useStore2[1];\n\n  var addressSchema = Yup.object().shape({\n    address: Yup.string().required(\"Address is required\"),\n    region: Yup.string().required(\"Region is required\"),\n    city: Yup.string().required(\"City is required\"),\n    gps_address: Yup.string()\n  });\n  return _jsxs(_Fragment, {\n    children: [displaySuccess && _jsx(Alert, {\n      type: \"success\",\n      text: \"\\uD83C\\uDF89 Your account has been created successfully\"\n    }), _jsxs(View, {\n      style: {\n        marginBottom: getScreenPercent(15),\n        marginTop: getScreenPercent(5)\n      },\n      children: [_jsxs(Text, {\n        style: [styles.label, {\n          fontSize: 34,\n          textAlign: \"center\",\n          marginBottom: getScreenPercent(2)\n        }],\n        children: [\"\\uD83D\\uDE1A Almost there!\", \" \"]\n      }), _jsx(Text, {\n        style: [styles.label, {\n          textAlign: \"center\"\n        }],\n        children: \"We need few details to complete your account\"\n      })]\n    }), _jsx(Formik, {\n      initialValues: {\n        address: \"\",\n        region: \"\",\n        city: \"\",\n        gps_address: \"\"\n      },\n      onSubmit: function _callee(values, _ref2) {\n        var resetForm, user, usersRef, data, applicationsRef;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resetForm = _ref2.resetForm;\n                _context.prev = 1;\n                setLoading(true);\n                user = GlassX.get(\"user\");\n                usersRef = firebase.firestore().collection(\"users\");\n                _context.next = 7;\n                return _regeneratorRuntime.awrap(usersRef.doc(user.id).update({\n                  step: 2\n                }));\n\n              case 7:\n                data = _objectSpread(_objectSpread({}, values), {}, {\n                  userId: user.id,\n                  status: \"incomplete\",\n                  createdAt: firebase.firestore.Timestamp.fromDate(new Date()),\n                  updatedAt: firebase.firestore.Timestamp.fromDate(new Date())\n                });\n                applicationsRef = firebase.firestore().collection(\"applications\");\n                _context.next = 11;\n                return _regeneratorRuntime.awrap(applicationsRef.doc().set(data));\n\n              case 11:\n                setDisplaySuccess(false);\n                setLoading(false);\n                resetForm();\n                useStep(2);\n                _context.next = 21;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](1);\n                console.log(_context.t0);\n                setLoading(false);\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[1, 17]], Promise);\n      },\n      validationSchema: addressSchema,\n      children: function children(_ref3) {\n        var handleBlur = _ref3.handleBlur,\n            handleChange = _ref3.handleChange,\n            handleSubmit = _ref3.handleSubmit,\n            errors = _ref3.errors,\n            values = _ref3.values,\n            touched = _ref3.touched;\n        return _jsxs(View, {\n          style: styles.formContainer,\n          children: [_jsx(Text, {\n            style: [styles.label, {\n              fontSize: 20,\n              marginBottom: getScreenPercent(2)\n            }],\n            children: \"Personal Address\"\n          }), _jsxs(View, {\n            style: styles.inputContainer,\n            children: [_jsx(Text, {\n              style: styles.label,\n              children: \"Address\"\n            }), _jsx(View, {\n              style: styles.input,\n              children: _jsx(TextInput, {\n                style: {\n                  flex: 1,\n                  borderWidth: 0\n                },\n                value: values.address,\n                onBlur: handleBlur(\"address\"),\n                onChangeText: function onChangeText(text) {\n                  handleChange(\"address\")(text);\n                }\n              })\n            }), errors.address && touched.address ? _jsx(Text, {\n              style: styles.errorStyle,\n              children: errors.address\n            }) : null]\n          }), _jsxs(View, {\n            style: styles.inputContainer,\n            children: [_jsx(Text, {\n              style: styles.label,\n              children: \"Region\"\n            }), _jsx(SelectDropdown, {\n              data: [\"hello\"],\n              onSelect: function onSelect(selectedItem, index) {\n                console.log(selectedItem, index);\n              },\n              defaultButtonText: \"\",\n              buttonTextStyle: _objectSpread(_objectSpread({}, styles.label), {}, {\n                textAlign: \"left\",\n                fontSize: 14\n              }),\n              buttonStyle: {\n                width: \"100%\",\n                borderWidth: 1.5,\n                backgroundColor: Colors.PRIMARY,\n                borderRadius: 10,\n                marginTop: \"2%\"\n              },\n              buttonTextAfterSelection: function buttonTextAfterSelection(selectedItem, index) {\n                return selectedItem;\n              },\n              rowTextForSelection: function rowTextForSelection(item, index) {\n                return item;\n              }\n            }), errors.region && touched.region ? _jsx(Text, {\n              style: styles.errorStyle,\n              children: errors.region\n            }) : null]\n          }), _jsxs(View, {\n            style: styles.inputContainer,\n            children: [_jsx(Text, {\n              style: styles.label,\n              children: \"City\"\n            }), _jsx(View, {\n              style: styles.input,\n              children: _jsx(TextInput, {\n                style: {\n                  flex: 1,\n                  borderWidth: 0\n                },\n                value: values.city,\n                onBlur: handleBlur(\"city\"),\n                onChangeText: function onChangeText(text) {\n                  handleChange(\"city\")(text);\n                }\n              })\n            }), errors.city && touched.city ? _jsx(Text, {\n              style: styles.errorStyle,\n              children: errors.city\n            }) : null]\n          }), _jsxs(View, {\n            style: styles.inputContainer,\n            children: [_jsx(Text, {\n              style: styles.label,\n              children: \"GPS Address\"\n            }), _jsx(View, {\n              style: styles.input,\n              children: _jsx(TextInput, {\n                style: {\n                  flex: 1,\n                  borderWidth: 0\n                },\n                value: values.gps_address,\n                onBlur: handleBlur(\"gps_address\"),\n                onChangeText: function onChangeText(text) {\n                  handleChange(\"gps_address\")(text);\n                }\n              })\n            }), errors.gps_address && touched.gps_address ? _jsx(Text, {\n              style: styles.errorStyle,\n              children: errors.gps_address\n            }) : null]\n          }), _jsx(Button, {\n            title: \"Next\",\n            loading: loading,\n            textStyle: {\n              fontSize: 18,\n              color: \"white\"\n            },\n            style: styles.button,\n            onPress: handleSubmit\n          })]\n        });\n      }\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  formContainer: {\n    paddingHorizontal: \"8%\"\n  },\n  label: {\n    fontFamily: FONTS.WORK_SANS_MEDIUM,\n    fontSize: 16\n  },\n  button: {\n    borderColor: Colors.SECONDARY,\n    width: \"100%\",\n    backgroundColor: Colors.SECONDARY,\n    height: \"11%\",\n    marginVertical: getScreenPercent(2.3)\n  },\n  errorStyle: {\n    color: \"red\"\n  },\n  inputContainer: {\n    marginBottom: \"2%\",\n    marginTop: \"1%\"\n  },\n  errorStyle: {\n    color: \"red\"\n  },\n  input: {\n    borderBottomColor: Colors.SECONDARY,\n    borderWidth: 1.5,\n    height: getScreenPercent(12.5),\n    width: \"100%\",\n    borderRadius: 10,\n    marginTop: \"2%\",\n    flexDirection: \"row\",\n    paddingBottom: getScreenPercent(0.4),\n    paddingHorizontal: getScreenPercent(4),\n    justifyContent: \"space-between\",\n    marginBottom: 2\n  }\n});","map":{"version":3,"sources":["/Users/cosmos/Projects/lenda/layouts/AddressForm.jsx"],"names":["React","useState","Colors","FONTS","getScreenPercent","Alert","Button","Formik","Yup","firebase","GlassX","useStore","SelectDropdown","AddressForm","useStep","loading","setLoading","displaySuccess","setDisplaySuccess","addressSchema","object","shape","address","string","required","region","city","gps_address","marginBottom","marginTop","styles","label","fontSize","textAlign","values","resetForm","user","get","usersRef","firestore","collection","doc","id","update","step","data","userId","status","createdAt","Timestamp","fromDate","Date","updatedAt","applicationsRef","set","console","log","handleBlur","handleChange","handleSubmit","errors","touched","formContainer","inputContainer","input","flex","borderWidth","text","errorStyle","selectedItem","index","width","backgroundColor","PRIMARY","borderRadius","item","color","button","StyleSheet","create","paddingHorizontal","fontFamily","WORK_SANS_MEDIUM","borderColor","SECONDARY","height","marginVertical","borderBottomColor","flexDirection","paddingBottom","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { View, StyleSheet, Text, TextInput } from \"react-native\";\nimport { Colors, FONTS } from \"../theme\";\nimport { getScreenPercent } from \"../utils\";\nimport { Alert, Button } from \"../components\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { firebase } from \"../firebase\";\nimport GlassX, { useStore } from \"glassx\";\nimport SelectDropdown from \"react-native-select-dropdown\";\n\nexport const AddressForm = ({ useStep }) => {\n  const [loading, setLoading] = useState();\n\n  const [displaySuccess, setDisplaySuccess] = useStore(\"displaySuccess\");\n\n  const addressSchema = Yup.object().shape({\n    address: Yup.string().required(\"Address is required\"),\n    region: Yup.string().required(\"Region is required\"),\n    city: Yup.string().required(\"City is required\"),\n    gps_address: Yup.string(),\n  });\n\n  return (\n    <>\n      {displaySuccess && (\n        <Alert\n          type=\"success\"\n          text=\"🎉 Your account has been created successfully\"\n        />\n      )}\n      <View\n        style={{\n          marginBottom: getScreenPercent(15),\n          marginTop: getScreenPercent(5),\n        }}\n      >\n        <Text\n          style={[\n            styles.label,\n            {\n              fontSize: 34,\n              textAlign: \"center\",\n              marginBottom: getScreenPercent(2),\n            },\n          ]}\n        >\n          😚 Almost there!{\" \"}\n        </Text>\n        <Text style={[styles.label, { textAlign: \"center\" }]}>\n          We need few details to complete your account\n        </Text>\n      </View>\n      <Formik\n        initialValues={{\n          address: \"\",\n          region: \"\",\n          city: \"\",\n          gps_address: \"\",\n        }}\n        onSubmit={async (values, { resetForm }) => {\n          try {\n            setLoading(true);\n            const user = GlassX.get(\"user\");\n            const usersRef = firebase.firestore().collection(\"users\");\n            await usersRef.doc(user.id).update({ step: 2 });\n            const data = {\n              ...values,\n              userId: user.id,\n              status: \"incomplete\",\n              createdAt: firebase.firestore.Timestamp.fromDate(new Date()),\n              updatedAt: firebase.firestore.Timestamp.fromDate(new Date()),\n            };\n            const applicationsRef = firebase\n              .firestore()\n              .collection(\"applications\");\n            await applicationsRef.doc().set(data);\n            setDisplaySuccess(false);\n            setLoading(false);\n            resetForm();\n            useStep(2);\n          } catch (err) {\n            console.log(err);\n            setLoading(false);\n          }\n        }}\n        validationSchema={addressSchema}\n      >\n        {({\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          errors,\n          values,\n          touched,\n        }) => (\n          <View style={styles.formContainer}>\n            <Text\n              style={[\n                styles.label,\n                { fontSize: 20, marginBottom: getScreenPercent(2) },\n              ]}\n            >\n              Personal Address\n            </Text>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>Address</Text>\n              <View style={styles.input}>\n                <TextInput\n                  style={{ flex: 1, borderWidth: 0 }}\n                  value={values.address}\n                  onBlur={handleBlur(\"address\")}\n                  onChangeText={(text) => {\n                    handleChange(\"address\")(text);\n                  }}\n                />\n              </View>\n              {errors.address && touched.address ? (\n                <Text style={styles.errorStyle}>{errors.address}</Text>\n              ) : null}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>Region</Text>\n              <SelectDropdown\n                data={[\"hello\"]}\n                onSelect={(selectedItem, index) => {\n                  console.log(selectedItem, index);\n                }}\n                defaultButtonText=\"\"\n                buttonTextStyle={{\n                  ...styles.label,\n                  textAlign: \"left\",\n                  fontSize: 14,\n                }}\n                buttonStyle={{\n                  width: \"100%\",\n                  borderWidth: 1.5,\n                  backgroundColor: Colors.PRIMARY,\n                  borderRadius: 10,\n                  marginTop: \"2%\",\n                }}\n                buttonTextAfterSelection={(selectedItem, index) => {\n                  // text represented after item is selected\n                  // if data array is an array of objects then return selectedItem.property to render after item is selected\n                  return selectedItem;\n                }}\n                rowTextForSelection={(item, index) => {\n                  // text represented for each item in dropdown\n                  // if data array is an array of objects then return item.property to represent item in dropdown\n                  return item;\n                }}\n              />\n              {errors.region && touched.region ? (\n                <Text style={styles.errorStyle}>{errors.region}</Text>\n              ) : null}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>City</Text>\n              <View style={styles.input}>\n                <TextInput\n                  style={{ flex: 1, borderWidth: 0 }}\n                  value={values.city}\n                  onBlur={handleBlur(\"city\")}\n                  onChangeText={(text) => {\n                    handleChange(\"city\")(text);\n                  }}\n                />\n              </View>\n              {errors.city && touched.city ? (\n                <Text style={styles.errorStyle}>{errors.city}</Text>\n              ) : null}\n            </View>\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>GPS Address</Text>\n              <View style={styles.input}>\n                <TextInput\n                  style={{ flex: 1, borderWidth: 0 }}\n                  value={values.gps_address}\n                  onBlur={handleBlur(\"gps_address\")}\n                  onChangeText={(text) => {\n                    handleChange(\"gps_address\")(text);\n                  }}\n                />\n              </View>\n              {errors.gps_address && touched.gps_address ? (\n                <Text style={styles.errorStyle}>{errors.gps_address}</Text>\n              ) : null}\n            </View>\n            <Button\n              title={\"Next\"}\n              loading={loading}\n              textStyle={{ fontSize: 18, color: \"white\" }}\n              style={styles.button}\n              onPress={handleSubmit}\n            />\n          </View>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  formContainer: {\n    paddingHorizontal: \"8%\",\n  },\n  label: {\n    fontFamily: FONTS.WORK_SANS_MEDIUM,\n    fontSize: 16,\n  },\n  button: {\n    borderColor: Colors.SECONDARY,\n    width: \"100%\",\n    backgroundColor: Colors.SECONDARY,\n    height: \"11%\",\n    marginVertical: getScreenPercent(2.3),\n  },\n  errorStyle: {\n    color: \"red\",\n  },\n  inputContainer: {\n    marginBottom: \"2%\",\n    marginTop: \"1%\",\n  },\n  errorStyle: {\n    color: \"red\",\n  },\n  input: {\n    borderBottomColor: Colors.SECONDARY,\n    borderWidth: 1.5,\n    height: getScreenPercent(12.5),\n    width: \"100%\",\n    borderRadius: 10,\n    marginTop: \"2%\",\n    flexDirection: \"row\",\n    paddingBottom: getScreenPercent(0.4),\n    paddingHorizontal: getScreenPercent(4),\n    justifyContent: \"space-between\",\n    marginBottom: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}